namespace: mssql_project.operations.azure.network.security
operation:
  name: createNetworkSecurityGroupe_OpenPort
  inputs:
    - nameIn: test-nsg
    - groupName
    - location: "${get_sp('azure.LOCATION')}"
    - sub_idVar: "${get_sp('azure.AZURE_SUBSCRIPTION_ID')}"
    - client_idVar: "${get_sp('azure.AZURE_CLIENT_ID')}"
    - client_secretVar: "${get_sp('azure.AZURE_CLIENT_SECRET')}"
    - tenant_idVar: "${get_sp('azure.AZURE_TENANT_ID')}"
    - os_type: windows
  python_action:
    use_jython: false
    script: "import os\nfrom typing import Protocol\nfrom azure.common.credentials import ServicePrincipalCredentials\nfrom azure.mgmt.resource import ResourceManagementClient\nfrom azure.mgmt.storage import StorageManagementClient\nfrom azure.mgmt.network import NetworkManagementClient\nfrom azure.mgmt.compute import ComputeManagementClient\nfrom azure.mgmt.network.models import NetworkSecurityGroup, SecurityRule\nfrom haikunator import Haikunator\n\n\n# do not remove the execute function \ndef execute(nameIn, groupName, location, os_type, sub_idVar, client_idVar, client_secretVar, tenant_idVar ): \n    message = \"\"\n    result = \"\"\n    nicID = \"\"\n    try:\n        \n        #\n        # Create all clients with an Application (service principal) token provider\n        #\n        subscription_id = sub_idVar  # your Azure Subscription Id\n        credentials = ServicePrincipalCredentials(\n            client_id=client_idVar,\n            secret=client_secretVar,\n            tenant=tenant_idVar\n        )\n        \n        resource_client = ResourceManagementClient(credentials, subscription_id)\n        compute_client = ComputeManagementClient(credentials, subscription_id)\n        storage_client = StorageManagementClient(credentials, subscription_id)\n        network_client = NetworkManagementClient(credentials, subscription_id)\n        \n        \n        \n        secGroupRes = create_default_securitygroup(network_client, groupName, location, nameIn, os_type, None)\n        if secGroupRes[\"result\"]:\n            result = \"True\"\n        else:\n            result = \"False\"\n        \n        message += secGroupRes[\"message\"]\n        nicID = secGroupRes[\"security_group_name\"]\n    except Exception as e:\n        message += str(e)\n        result = \"False\"\n    return {\"result\": result, \"message\": message, \"security_group_name\": nicID }\n    # code goes here\n    \n# you can add additional helper methods below.\n\ndef create_default_securitygroup(network_client, resource_group, location, name, os_type, open_ports):\n    '''\n    Create a default security group <name>01 to associate with a network interface. If a security group matching\n    <name>01 exists, return it. Otherwise, create one.\n    :param resource_group: Resource group name\n    :param location: azure location name\n    :param name: base name to use for the security group\n    :param os_type: one of 'Windows' or 'Linux'. Determins any default rules added to the security group.\n    :param ssh_port: for os_type 'Linux' port used in rule allowing SSH access.\n    :param rdp_port: for os_type 'Windows' port used in rule allowing RDP access.\n    :return: security_group object\n    '''\n    result = False\n    message = \"\"\n    security_group_name = name + '01'\n    group = None\n\n    message += \"Create security group {0}\\n\".format(security_group_name)\n    message += \"Check to see if security group {0} exists\\n\".format(security_group_name)\n    try:\n        group = network_client.network_security_groups.get(resource_group, security_group_name)\n    except:\n        pass\n\n    if group:\n        message += \"Security group {0} found.\\n\".format(security_group_name)\n        #check_provisioning_state(group)\n        return {\"result\": True, \"message\": message, \"security_group_name\": security_group_name }\n\n    parameters = NetworkSecurityGroup()\n    parameters.location = location\n\n    if not open_ports:\n        # Open default ports based on OS type\n        if os_type == 'Linux':\n            # add an inbound SSH rule\n            parameters.security_rules = [\n                SecurityRule(protocol='Tcp', source_address_prefix='*', destination_address_prefix='*', access='Allow', direction='Inbound', description='Allow SSH Access',\n                                source_port_range='*', destination_port_range='22', priority=100, name='SSH')\n            ]\n            parameters.location = location\n        else:\n            # for windows add inbound RDP rules\n            parameters.security_rules = [\n                SecurityRule(protocol='Tcp', source_address_prefix='*', destination_address_prefix='*', access='Allow', direction='Inbound', description='Allow RDP port 3389',\n                                source_port_range='*', destination_port_range='3389', priority=100, name='RDP01'),\n                SecurityRule(protocol='Tcp', source_address_prefix='*', destination_address_prefix='*', access='Allow', direction='Inbound', description='Allow RDP port 5986',\n                                source_port_range='*', destination_port_range='5986', priority=101, name='Winrm01'),\n                SecurityRule(protocol='Tcp', source_address_prefix='*', destination_address_prefix='*', access='Allow', direction='Inbound', description='Allow RDP port 5985',\n                                source_port_range='*', destination_port_range='5985', priority=102, name='Winrm02')\n            ]\n    else:\n        # Open custom ports\n        parameters.security_rules = []\n        priority = 100\n        for port in open_ports:\n            priority += 1\n            rule_name = \"Rule_{0}\".format(priority)\n            parameters.security_rules.append(\n                SecurityRule('Tcp', '*', '*', 'Allow', 'Inbound', source_port_range='*',\n                                destination_port_range=str(port), priority=priority, name=rule_name)\n            )\n\n    message += 'Creating default security group {0}\\n'.format(security_group_name)\n    try:\n        poller = network_client.network_security_groups.create_or_update(resource_group,\n                                                                                security_group_name,\n                                                                                parameters)\n        result = True\n    except Exception as exc:\n        message += \"Error creating default security rule {0} - {1}\\n\".format(security_group_name, str(exc))\n        result = False\n        \n    return {\"result\": result, \"message\": message, \"security_group_name\": security_group_name }"
  outputs:
    - result
    - message
    - security_group_name
  results:
    - SUCCESS: '${result=="True"}'
    - FAILURE
